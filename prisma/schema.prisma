generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_UPLOAD_SCHEMA_URL")
  referentialIntegrity = "prisma"
}

model Bookmark {
  id                Int     @id @default(autoincrement())
  bookmarkName      String
  bookmarkMemo      String?
  placeName         String
  placeUrl          String
  categoryName      String
  addressName       String
  roadAddressName   String
  bookmarkId        String
  phone             String
  categoryGroupCode String
  categoryGroupName String
  x                 String
  y                 String
  bookmarkImg       String? @db.LongText
  userId            Int
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "Bookmark_ibfk_1")

  @@index([userId], map: "user_fk_2_idx")
}

model Comment {
  id       Int       @id @default(autoincrement())
  content  String
  like     Int       @default(0)
  createAt DateTime? @default(now())
  updateAt DateTime?
  postId   Int
  userId   Int
  Post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "Comment_ibfk_1")
  User     User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "Comment_ibfk_2")

  @@index([postId], map: "post_fk_1_idx")
  @@index([userId], map: "user_fk_3_idx")
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String    @db.LongText
  flagHideYN String    @default("N") @db.Char(1)
  markedData Json?
  cateCity   String?
  tag        Json?
  like       Int       @default(0)
  createAt   DateTime? @default(now())
  updateAt   DateTime?
  userId     Int
  mainImg    String?   @db.LongText
  type       String    @default("post")
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "Post_ibfk_1")
  Comment    Comment[]

  @@index([userId], map: "user_fk_1_idx")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  password    String?
  name        String?
  nickname    String?
  phoneNumber String?
  address     String?
  role        String     @default("user")
  age         Int?
  profileImg  String?    @db.LongText
  createAt    DateTime?  @default(now())
  updateAt    DateTime?
  profileText String?
  Bookmark    Bookmark[]
  Comment     Comment[]
  Post        Post[]
}
